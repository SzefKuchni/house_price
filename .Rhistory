p<-ggplot()+
geom_boxplot(data=train, aes_string(x=i, y="SalePrice"))+
geom_violin(data=train, aes_string(x=i, y="SalePrice"), alpha=0)
plot(p)
annova
train_div$other
names(train_div$other)
names(train_div$other)[1]
fit <- aov(SalePrice ~ MSZoning, data=train)
fit
fit <- lm(SalePrice ~ MSZoning, data=train)
anova(fit)
plot(fit)
fit <- aov(SalePrice ~ MSZoning, data=train)
anova(fit)
plot(fit)
fit$coefficients
fit$effects
fit$qr
fit$df.residual
fit$contrasts
fit$xlevels
fit$call
fit$terms
fit$model
fit
fit <- aov(SalePrice ~ MSZoning, data=train)
fit
anova(fit)
fit <- lm(SalePrice ~ MSZoning, data=train)
anova(fit)
fit<-anova(fit)
fit$`Pr(>F)`
fit
fit$`Pr(>F)`
fit$`Pr(>F)`[1]
fit$`Pr(>F)`[1]<0.05
names(train_div$other)
for (i in names(train_div$other)) {
}
i
lm(SalePrice ~ i, data=train)
paste("SalePrice~",i,sep = "")
as.formula(paste("SalePrice~",i,sep = ""))
fit <- lm(formula = as.formula(paste("SalePrice~",i,sep = "")), data=train)
fit<-anova(fit)
diff_means<-fit$`Pr(>F)`[1]<0.05
diff_means
result<-data.frame()
for (i in names(train_div$other)) {
fit <- lm(formula = as.formula(paste("SalePrice~",i,sep = "")), data=train)
fit<-anova(fit)
diff_means<-fit$`Pr(>F)`[1]<0.05
result<-rbind(result, data.frame("Variable"=i, diff_means))
}
View(result)
p<-ggplot()+
geom_boxplot(data=train, aes_string(x="MiscFeature", y="SalePrice"))+
geom_violin(data=train, aes_string(x="MiscFeature", y="SalePrice"), alpha=0)
p
p<-ggplot()+
geom_boxplot(data=train, aes_string(x="PoolQC", y="SalePrice"))+
geom_violin(data=train, aes_string(x="PoolQC", y="SalePrice"), alpha=0)
p
p<-ggplot()+
geom_boxplot(data=train, aes_string(x="MSZoning", y="SalePrice"))+
geom_violin(data=train, aes_string(x="MSZoning", y="SalePrice"), alpha=0)
p
p<-ggplot()+
geom_boxplot(data=train, aes_string(x="Street", y="SalePrice"))+
geom_violin(data=train, aes_string(x="Street", y="SalePrice"), alpha=0)
p
fit <- lm(SalePrice ~ Street, data=train)
fit
fit<-anova(fit)
fit
diff_means<-fit$`Pr(>F)`[1]<0.05
diff_means
fit<-anova(fit)
fit
mean(train$SaleType[train$Street=="Grvl"])
mean(train$SaleType[train$Street=="Grvl"], na.rm=T)
train$Street=="Grvl"
train$SaleType[train$Street=="Grvl"]
mean(train$SalePrice[train$Street=="Grvl"], na.rm=T)
mean(train$SalePrice[train$Street=="Pave"], na.rm=T)
train$SalePrice[train$Street=="Grvl"]
train$SalePrice[train$Street=="Pave"]
m1<-mean(train$SalePrice[train$Street=="Grvl"], na.rm=T)
m2<-mean(train$SalePrice[train$Street=="Pave"], na.rm=T)
m1-m2
m2-m1
length(m1)
m1_mean<-mean(train$SalePrice[train$Street=="Grvl"], na.rm=T)
m2_mean<-mean(train$SalePrice[train$Street=="Pave"], na.rm=T)
m1<-train$SalePrice[train$Street=="Grvl"]
m2<-train$SalePrice[train$Street=="Pave"]
length(m1)
var(m1)
m1
(m2_mean-m1_mean)/sqrt(var(m1)/length(m1)+var(m2)/length(m2))
fit <- lm(SalePrice ~ Street, data=train)
fit<-anova(fit)
fit
(m2_mean-m1_mean)/sqrt(var(m1)/length(m1)+var(m2)/length(m2))
require(devtools)
install_github("mpiccirilli/Rlinkedin")
require(Rlinkedin)
in.auth <- inOAuth()
in.auth <- inOAuth()
app_name<-"Data download test"
app_name<-"Data download test"
consumer_key<-"786oy31bj5uws5"
consumer_secret<-"mpRXc0Q9wZcEGVfv"
in.auth <- inOAuth(app_name, consumer_key, consumer_secret)
my.profile <- getProfile(in.auth)
my.profile
my.profile <- getProfile(in.auth, connections = TRUE)
my.profile <- getProfile(in.auth, connections = TRUE)
my.profile
getProfile(in.auth, connections = TRUE)
in.auth <- inOAuth(app_name, consumer_key, consumer_secret)
getProfile(in.auth, connections = TRUE)
my.profile <- getProfile(in.auth)
my.profile
my.profile <- getProfile(in.auth, connections = TRUE)
search.ppl <- searchPeople(token=in.auth, first_name="Michael", last_name="Piccirilli")
search.ppl <- searchPeople(token=in.auth, last_name="Piccirilli")
searchPeople(token=in.auth, last_name="Piccirilli")
search.ppl <- searchPeople(token=in.auth, last_name="Piccirilli")
library(RSelenium)
checkForServer()
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4444
, browserName = "firefox"
)
remDr$open()
checkForServer()
library(RSelenium)
checkForServer()
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4444
, browserName = "firefox"
)
remDr$getStatus()
remDr$open()
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4444
, browserName = "chrome"
)
remDr$open()
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4444
, browserName = "firefox"
)
remDr$open()
remDr$open()
remDr$open()
remDr$open()
remDr$open()
startServer()
library(RSelenium)
startServer()
remDr <- remoteDriver(remoteServerAddr = "localhost"
, port = 4444
, browserName = "firefox"
)
remDr$open()
remDr$navigate("http://www.bbc.co.uk")
remDr$navigate("http://www.sacbee.com/news/local/crime/local-arrests/article2757575.html")
remDr$getStatus()
webElem <- remDr$findElement(using = 'css selector', "input.sb-ui-table-string , tbody")
webElem
webElem <- remDr$findElement(using = 'css selector', "input.sb-ui-table-string")
webElem <- remDr$findElement(using = 'css selector', "input.sb-ui-table-string , tbody")
webElem
webElem <- remDr$findElement(using = 'css selector', "input.sb-ui-table-string")
webElem <- remDr$findElement(using = 'css selector', "input.div")
webElem <- remDr$findElement(using = 'css selector', "input.sb-ui-table-string, tbody")
webElem
webElem$autoClose
webElem$browserName
webElem$debugheader
remDr$getPageSource()
htmlParse(remDr$getPageSource()[[1]])
text<-htmlParse(remDr$getPageSource()[[1]])
write(text, "c://Users/T540pDLEWYNBQ/Desktop/Experfy - Entity Extraction from DUI Arrest Logs for Law Firm/webpage.txt")
write(text, "c://Users/T540pDLEWYNBQ/Desktop/Experfy - Entity Extraction from DUI Arrest Logs for Law Firm/webpage.txt", sep = "/t")
write(x = text, file = "c://Users/T540pDLEWYNBQ/Desktop/Experfy - Entity Extraction from DUI Arrest Logs for Law Firm/webpage.txt", sep = "/t")
write.table(x = text, file = "c://Users/T540pDLEWYNBQ/Desktop/Experfy - Entity Extraction from DUI Arrest Logs for Law Firm/webpage.txt")
class(text)
cat(text)
text
text
class(text)
save(text, "c://Users/T540pDLEWYNBQ/Desktop/Experfy - Entity Extraction from DUI Arrest Logs for Law Firm/webpage.txt")
saveXML(text, "c://Users/T540pDLEWYNBQ/Desktop/Experfy - Entity Extraction from DUI Arrest Logs for Law Firm/webpage.txt")
webElem <- remDr$findElement(using = 'css selector', "input.sb-ui-table sb-ui-table-color-blue sb-ui-table-theme-material sb-ui-table-alternating sb-ui-table-small")
webElem <- remDr$findElement(using = 'css selector', "input.sb-ui-table-string, tbody")
webElem
webElem$extraCapabilities
webElem$hcode
webElem$javascript
webElem$nativeEvents
webElem$platform
webElem$responseheader
webElem$value
webElem$getElementText()
webElem$getElementAttribute()
webElem$getElementAttribute("class")
webElem$getElementAttribute("css selector")
webElem$getElementAttribute("input.sb-ui-table-string, tbody")
webElem$getElementAttribute()
webElem$getElementAttribute(attrName = "input.sb-ui-table-string, tbody")
webElem
webElem$getElementText()
webElem <- remDr$findElement(using = 'css selector', "input.title")
webElem <- remDr$findElement(using = 'css selector', ".title")
webElem$getElementText()
webElem <- remDr$findElement(using = 'css selector', "tbody")
webElem$getElementText()
webElem <- remDr$findElement(using = 'css selector', ".sb-ui-table-string")
webElem$getElementText()
webElem
webElem <- remDr$findElement(using = 'css selector', "th")
webElem
webElem$getElementText()
webElem <- remDr$findElement(using = 'css selector', "div")
webElem$getElementText()
source("C://Users/T540pDLEWYNBQ/Desktop/house_price/helper_functions/sample_ec.R")
source("helper_functions/explore_feature_div.R")
train_div<-feature_div(train, "Id")
train_div$class
source("helper_functions/explore_cor_with.R")
correlation<-cor_with(data = train_div$numeric, measure_to_check_cor_with = "SalePrice")
source("helper_functions/explore_isNA.R")
missing<-isNA(data = train)
source("helper_functions/explore_outliers_num.R")
outliers<-outliers_num(data = train_div$numeric)
test$SalePrice<-NA
combi<-rbind(train, test)
combi$origin<-ifelse(is.na(combi$SalePrice), "test", "train")
source("helper_functions/explore_plots_uni_num.R")
plot_uni_num(data_with_num_var = train_div$numeric, data_to_plot_with = combi)
source("helper_functions/explore_plots_uni_cat.R")
plot_uni_cat(data_with_cat_var = train_div$other, data_to_plot_with = combi)
plots_bi_num <- function(data_num, y_variable) {
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable) {
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i))+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm")+
scale_y_continuous(labels = short)
cor<-round(cor_result[cor_result$Variable==i,"Cor"],2)
name<-paste(cor, "_", i,"_bi_num.png", sep = "")
full_path<-paste("plots/",name, sep="")
png(full_path, width = 800, height = 800)
print(p)
dev.off()
}
}
train_div$numeric
train_div$numeric[1]
plots_bi_num(data_num = train_div$numeric[1], y_variable = "SalePrice")
plots_bi_num(data_num = train_div$numeric[1:2], y_variable = "SalePrice")
data_num = train_div$numeric[1]
y_variable = "SalePrice"
outliers_num_result<-outliers_num(data_num)
outliers_num_result
cor_result<-cor_with(data_num, y_variable)
cor_result
data_num
y_variable
cor_result<-cor_with(data_num, y_variable)
cor_with
train_div$numeric[1:2]
data_num = train_div$numeric[1:2]
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
outliers_num_result
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
cor_result
cor_with
train_div$numeric
ncol(train_div$numeric)
data_num = train_div$numeric[36:37]
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
outliers_num_result
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
cor_result
cor_result<-cor_with(data_num, y_variable)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
measure_to_check_cor_with=y_variable
data=data_num
result<-data.frame()
for (i in names(data[,-which(names(data) %in% c(measure_to_check_cor_with))])) {
}
i
data
names(data)
c(measure_to_check_cor_with)
-which(names(data) %in% c(measure_to_check_cor_with))
names(data[,-which(names(data) %in% c(measure_to_check_cor_with))])
data[,-which(names(data) %in% c(measure_to_check_cor_with))]
plots_bi_num(data_num = train_div$numeric[35:37], y_variable = "SalePrice")
data_num
y_variable
i
for (i in cor_result$Variable) {
}
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
data_num = train_div$numeric[35:37]
cor_result<-cor_with(data_num, y_variable)
cor_result
i
for (i in cor_result$Variable) {
}
i
data_num = train_div$numeric
data_num
data_num = train_div$numeric
y_variable = "SalePrice"
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable) {
}
i
temp_data<-data_num[,c(y_variable, i)]
temp_data
temp_data[i]
temp_data[y_variable]
lm<-lm.fit(x = temp_data[i], y = temp_data[y_variable])
temp_data[y_variable]
formula<-formula(temp_data[y_variable],"~",temp_data[i])
formula
temp_data[i]
formula<-formula(y_variable,"~",i)
formula
formula<-formula(paste(y_variable,"~",i))
formula
lm<-lm(formula=formula, data=temp_data)
lm
temp_data[i]
predict(temp_data[i])
predict(temp_data[[i]])
lm<-lm(formula=formula, data=temp_data)
lm
predict(object = lm, temp_data[[i]])
predict(object = lm, newdata = temp_data[[i]])
temp_data[[i]]
predict(object = lm, newdata = temp_data[i])
temp_data<-cbind(temp_data, prediction)
prediction<-predict(object = lm, newdata = temp_data[i])
temp_data<-cbind(temp_data, prediction)
head(temp_data)
y_variable
temp_data$prediction
(temp_data[,y_variable]-temp_data$prediction)
(temp_data[,y_variable]-temp_data$prediction)^2
sqrt((temp_data[,y_variable]-temp_data$prediction)^2)
temp_data$dist_from_lm<-sqrt((temp_data[,y_variable]-temp_data$prediction)^2)
head(temp_data)
temp_data$dist_from_lm
quantile(temp_data$dist_from_lm, 0.25, na.rm = T)
low_outlier<-unname(quantile(temp_data$dist_from_lm, 0.25, na.rm = T)-1.5*(quantile(temp_data$dist_from_lm, 0.75, na.rm = T)-quantile(temp_data$dist_from_lm, 0.25, na.rm = T)))
low_outlier
high_outlier<-unname(quantile(temp_data$dist_from_lm, 0.75, na.rm = T)+1.5*(quantile(temp_data$dist_from_lm, 0.75, na.rm = T)-quantile(temp_data$dist_from_lm, 0.25, na.rm = T)))
high_outlier
temp_data$outlier_flag<-as.factor(ifelse(temp_data$dist_from_lm>high_outlier, 1, 0))
head(temp_data)
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm", se = FALSE)+
scale_y_continuous(labels = short)
p
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i, col="outlier_flag"))+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm", se = FALSE)+
scale_y_continuous(labels = short)
p
p<-ggplot()+
geom_point(data=temp_data, aes_string(y=y_variable, x=i, col="outlier_flag"))+
#geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
#geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
#geom_smooth(data=data_num, aes_string(y=y_variable, x=i))+
geom_smooth(data=temp_data, aes_string(y=y_variable, x=i), method = "lm", se = FALSE)+
scale_y_continuous(labels = short)
p
p<-ggplot()+
geom_point(data=temp_data, aes_string(y=y_variable, x=i, col="outlier_flag"))+
#geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
#geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
#geom_smooth(data=data_num, aes_string(y=y_variable, x=i))+
geom_smooth(data=temp_data, aes_string(y=y_variable, x=i), method = "lm", se = FALSE)+
scale_y_continuous(labels = short)+
scale_color_manual(values = c(0,1), color=c("black","red"))
p<-ggplot()+
geom_point(data=temp_data, aes_string(y=y_variable, x=i, col="outlier_flag"))+
#geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
#geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
#geom_smooth(data=data_num, aes_string(y=y_variable, x=i))+
geom_smooth(data=temp_data, aes_string(y=y_variable, x=i), method = "lm", se = FALSE)+
scale_y_continuous(labels = short)+
scale_color_manual(values = c(0="black",1="red"))
p<-ggplot()+
geom_point(data=temp_data, aes_string(y=y_variable, x=i, col="outlier_flag"))+
#geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
#geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
#geom_smooth(data=data_num, aes_string(y=y_variable, x=i))+
geom_smooth(data=temp_data, aes_string(y=y_variable, x=i), method = "lm", se = FALSE)+
scale_y_continuous(labels = short)+
scale_color_manual(values = c("0"="black","1"="red"))
p
train_div$numeric[35:37]
plots_bi_num(data_num = train_div$numeric[35:37], y_variable = "SalePrice")
plots_bi_num <- function(data_num, y_variable) {
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable) {
temp_data<-data_num[,c(y_variable, i)]
formula<-formula(paste(y_variable,"~",i))
lm<-lm(formula=formula, data=temp_data)
prediction<-predict(object = lm, newdata = temp_data[i])
temp_data<-cbind(temp_data, prediction)
temp_data$dist_from_lm<-sqrt((temp_data[,y_variable]-temp_data$prediction)^2)
low_outlier<-unname(quantile(temp_data$dist_from_lm, 0.25, na.rm = T)-1.5*(quantile(temp_data$dist_from_lm, 0.75, na.rm = T)-quantile(temp_data$dist_from_lm, 0.25, na.rm = T)))
high_outlier<-unname(quantile(temp_data$dist_from_lm, 0.75, na.rm = T)+1.5*(quantile(temp_data$dist_from_lm, 0.75, na.rm = T)-quantile(temp_data$dist_from_lm, 0.25, na.rm = T)))
temp_data$outlier_flag<-as.factor(ifelse(temp_data$dist_from_lm>high_outlier, 1, 0))
head(temp_data)
p<-ggplot()+
geom_point(data=temp_data, aes_string(y=y_variable, x=i, col="outlier_flag"))+
#geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
#geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
#geom_smooth(data=data_num, aes_string(y=y_variable, x=i))+
geom_smooth(data=temp_data, aes_string(y=y_variable, x=i), method = "lm", se = FALSE)+
scale_y_continuous(labels = short)+
scale_color_manual(values = c("0"="black","1"="red"))
cor<-round(cor_result[cor_result$Variable==i,"Cor"],2)
name<-paste(cor, "_", i,"_bi_num.png", sep = "")
full_path<-paste("plots/",name, sep="")
png(full_path, width = 800, height = 800)
print(p)
dev.off()
}
}
plots_bi_num(data_num = train_div$numeric[35:37], y_variable = "SalePrice")
plots_bi_num(data_num = train_div$numeric, y_variable = "SalePrice")
plots_bi_num <- function(data_num, y_variable) {
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable) {
temp_data<-data_num[,c(y_variable, i)]
formula<-formula(paste(y_variable,"~",i))
lm<-lm(formula=formula, data=temp_data)
prediction<-predict(object = lm, newdata = temp_data[i])
temp_data<-cbind(temp_data, prediction)
temp_data$dist_from_lm<-sqrt((temp_data[,y_variable]-temp_data$prediction)^2)
low_outlier<-unname(quantile(temp_data$dist_from_lm, 0.25, na.rm = T)-1.5*(quantile(temp_data$dist_from_lm, 0.75, na.rm = T)-quantile(temp_data$dist_from_lm, 0.25, na.rm = T)))
high_outlier<-unname(quantile(temp_data$dist_from_lm, 0.75, na.rm = T)+1.5*(quantile(temp_data$dist_from_lm, 0.75, na.rm = T)-quantile(temp_data$dist_from_lm, 0.25, na.rm = T)))
temp_data$outlier_flag<-as.factor(ifelse(temp_data$dist_from_lm>high_outlier, 1, 0))
head(temp_data)
p<-ggplot()+
geom_point(data=temp_data, aes_string(y=y_variable, x=i, col="outlier_flag"))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i))+
geom_smooth(data=temp_data, aes_string(y=y_variable, x=i), method = "lm", se = FALSE)+
scale_y_continuous(labels = short)+
scale_color_manual(values = c("0"="black","1"="red"))
cor<-round(cor_result[cor_result$Variable==i,"Cor"],2)
name<-paste(cor, "_", i,"_bi_num.png", sep = "")
full_path<-paste("plots/",name, sep="")
png(full_path, width = 800, height = 800)
print(p)
dev.off()
}
}
plots_bi_num(data_num = train_div$numeric, y_variable = "SalePrice")
source("helper_functions/explore_plots_bi_cat.R")
plots_bi_cat(data_cat = train_div$other, y_variable = "SalePrice")
