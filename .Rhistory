p
combi$SalePrice
ifelse(combi$SalePrice==NA, "TEST", "TRAIN")
ifelse(is.na(combi$SalePrice), "TEST", "TRAIN")
combi$origin<-ifelse(is.na(combi$SalePrice), "TEST", "TRAIN")
p<-ggplot(data = combi)+
geom_bar(aes_string(x=i, fill=origin), stat = "count", position = "dodge")
p
p<-ggplot(data = combi)+
geom_bar(aes_string(x=i, fill=origin), stat = "count", position = "dodge")
p<-ggplot(data = combi)+
geom_bar(aes(x=i, fill=origin), stat = "count", position = "dodge")
p
p<-ggplot(data = combi)+
geom_bar(aes_(x=i, fill=origin), stat = "count", position = "dodge")
p
p<-ggplot(data = combi)+
geom_bar(aes_string(x=i, fill="origin"), stat = "count", position = "dodge")
p
name<-paste("univariate_categorical_",i,".png", sep="")
full_path<-paste("plots/",name, sep="")
full_path
name<-paste("uni_cat_",i,".png", sep="")
full_path<-paste("plots/",name, sep="")
full_path
for (i in names(train_div$other)) {
p<-ggplot(data = combi)+
geom_bar(aes_string(x=i, fill="origin"), stat = "count", position = "dodge")
p
name<-paste("uni_cat_",i,".png", sep="")
full_path<-paste("plots/",name, sep="")
png(full_path)
print(p)
dev.off()
}
for (i in names(train_div$numeric)) {
}
p<-ggplot(data = combi)+
geom_bar(aes_string(x=i, fill="origin"), stat = "count", position = "dodge")
p
p<-ggplot(data = combi)+
geom_histogram(aes_string(x=i, fill="origin"))
p
names(train_div$numeric)
i<-"LotArea"
p<-ggplot(data = combi)+
geom_histogram(aes_string(x=i, fill="origin"))
p
p<-ggplot(data = combi)+
geom_histogram(aes_string(x=i, fill="origin"), position = "dodge")
p
plot_uni_cat <- function(cat_var) {
for (i in names(cat_var)) {
p<-ggplot(data = combi)+
geom_bar(aes_string(x=i, fill="origin"), stat = "count", position = "dodge")+
ggtitle("Count in clases")
p
name<-paste("uni_cat_",i,".png", sep="")
full_path<-paste("plots/",name, sep="")
png(full_path)
print(p)
dev.off()
}
}
train_div$other[1]
plot_uni_cat(cat_var = train_div$other[1])
source("helper_functions/explote_plots_uni_cat.R")
plot_uni_cat(data_with_cat_var = train_div$other, data_to_plot_with = combi)
source("helper_functions/explote_plots_uni_cat.R")
plot_uni_cat(data_with_cat_var = train_div$other, data_to_plot_with = combi)
plot_uni_cat <- function(data_with_cat_var, data_to_plot_with) {
for (i in names(data_with_cat_var)) {
p<-ggplot(data = data_to_plot_with)+
geom_histogram(aes_string(x=i, fill="origin"), position = "dodge")+
ggtitle("Histogram")
p
name<-paste("uni_num_",i,".png", sep="")
full_path<-paste("plots/",name, sep="")
png(full_path)
print(p)
dev.off()
}
}
plot_uni_num <- function(data_with_cat_var, data_to_plot_with) {
for (i in names(data_with_cat_var)) {
p<-ggplot(data = data_to_plot_with)+
geom_histogram(aes_string(x=i, fill="origin"), position = "dodge")+
ggtitle("Histogram")
p
name<-paste("uni_num_",i,".png", sep="")
full_path<-paste("plots/",name, sep="")
png(full_path)
print(p)
dev.off()
}
}
plot_uni_num <- function(data_with_num_var, data_to_plot_with) {
for (i in names(data_with_num_var)) {
p<-ggplot(data = data_to_plot_with)+
geom_histogram(aes_string(x=i, fill="origin"), position = "dodge")+
ggtitle("Histogram")
p
name<-paste("uni_num_",i,".png", sep="")
full_path<-paste("plots/",name, sep="")
png(full_path)
print(p)
dev.off()
}
}
plot_uni_num(data_with_num_var = train_div$numeric[1], data_to_plot_with = combi)
source("helper_functions/explote_plots_uni_num.R")
source("helper_functions/explote_plots_uni_cat.R")
plot_uni_cat(data_with_cat_var = train_div$other, data_to_plot_with = combi)
source("helper_functions/explote_plots_uni_num.R")
plot_uni_num(data_with_num_var = train_div$num, data_to_plot_with = combi)
p<-ggplot()+
geom_point(data=train, aes_string(y="SalePrice", x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable=="SalePrice", "high_outlier"], col="red")
plot(p)
p<-ggplot()+
geom_point(data=train, aes_string(y="SalePrice", x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable=="SalePrice", "high_outlier"], col="red")+
grom_smooth(aes_string(y="SalePrice", x=i))
plot(p)
p<-ggplot()+
geom_point(data=train, aes_string(y="SalePrice", x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable=="SalePrice", "high_outlier"], col="red")+
geom_smooth(aes_string(y="SalePrice", x=i))
plot(p)
p<-ggplot()+
geom_point(data=train, aes_string(y="SalePrice", x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable=="SalePrice", "high_outlier"], col="red")+
geom_smooth(data=train, aes_string(y="SalePrice", x=i))
plot(p)
p<-ggplot()+
geom_point(data=train, aes_string(y="SalePrice", x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable=="SalePrice", "high_outlier"], col="red")+
geom_smooth(data=train, aes_string(y="SalePrice", x=i), method = "lm")
plot(p)
plots_bi_num <- function(data_num, y_variable) {
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
for (i in cor_result$Variable[1:4]) {
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm")
plot(p)
}
}
lol <- function(a) {
return(paste(a/1000, "k"))
}
lol(1000)
lol <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
lol(1000)
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm")+
scale_y_continuous(labels = short)
plots_bi_num(data_num = train_div$numeric, y_variable = "SalePrice")
plots_bi_num <- function(data_num, y_variable) {
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable[1:4]) {
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm")+
scale_y_continuous(labels = short())
plot(p)
}
}
plots_bi_num(data_num = train_div$numeric, y_variable = "SalePrice")
#bivariate analysis of numerical variables
# as arguments it takes data set containing numerical features and the variable that we want to predict
plots_bi_num <- function(data_num, y_variable) {
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable[1:4]) {
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm")+
scale_y_continuous(labels = short)
plot(p)
}
}
plots_bi_num(data_num = train_div$numeric, y_variable = "SalePrice")
i
head(cor_result)
cor_result[Variable==i]
cor_result[cor_result$Variable==i,]
cor_result[cor_result$Variable==i,"Cor"]
cor<-cor_result[cor_result$Variable==i,"Cor"]
cor
filname<-paste(cor, "_", i, sep = "")
filname
cor<-round(cor_result[cor_result$Variable==i,"Cor"],2)
cor
filname<-paste(cor, "_", i, sep = "")
filname
filname<-paste(cor, "_", i,"bi_num", sep = "")
filname
filname<-paste(cor, "_", i,"_bi_num", sep = "")
filname
filname<-paste(cor, "_", i,"_bi_num.png", sep = "")
filname
name<-paste(cor, "_", i,"_bi_num.png", sep = "")
full_path<-paste("plots/",name, sep="")
full_path
cor_result$Variable
plots_bi_num <- function(data_num, y_variable) {
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable) {
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm")+
scale_y_continuous(labels = short)
cor<-round(cor_result[cor_result$Variable==i,"Cor"],2)
name<-paste(cor, "_", i,"_bi_num.png", sep = "")
full_path<-paste("plots/",name, sep="")
png(full_path)
p
dev.off()
}
}
train_div$numeric[1]
plots_bi_num(data_num = train_div$numeric, y_variable = "SalePrice")
data_num = train_div$numeric, y_variable = "SalePrice"
data_num = train_div$numeric
y_variable = "SalePrice"
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
outliers_num_result
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
cor_result
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable) {
}
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm")+
scale_y_continuous(labels = short)
p
cor<-round(cor_result[cor_result$Variable==i,"Cor"],2)
name<-paste(cor, "_", i,"_bi_num.png", sep = "")
full_path<-paste("plots/",name, sep="")
full_path
png(full_path)
p
dev.off()
#bivariate analysis of numerical variables
# as arguments it takes data set containing numerical features and the variable that we want to predict
plots_bi_num <- function(data_num, y_variable) {
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable) {
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm")+
scale_y_continuous(labels = short)
cor<-round(cor_result[cor_result$Variable==i,"Cor"],2)
name<-paste(cor, "_", i,"_bi_num.png", sep = "")
full_path<-paste("plots/",name, sep="")
png(full_path)
p
dev.off()
}
}
plots_bi_num(data_num = train_div$numeric, y_variable = "SalePrice")
#bivariate analysis of numerical variables
# as arguments it takes data set containing numerical features and the variable that we want to predict
plots_bi_num <- function(data_num, y_variable) {
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable) {
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm")+
scale_y_continuous(labels = short)
cor<-round(cor_result[cor_result$Variable==i,"Cor"],2)
name<-paste(cor, "_", i,"_bi_num.png", sep = "")
full_path<-paste("plots/",name, sep="")
png(full_path)
print(p)
dev.off()
}
}
plots_bi_num(data_num = train_div$numeric, y_variable = "SalePrice")
#bivariate analysis of numerical variables
# as arguments it takes data set containing numerical features and the variable that we want to predict
plots_bi_num <- function(data_num, y_variable) {
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable) {
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm")+
scale_y_continuous(labels = short)
cor<-round(cor_result[cor_result$Variable==i,"Cor"],2)
name<-paste(cor, "_", i,"_bi_num.png", sep = "")
full_path<-paste("plots/",name, sep="")
png(full_path, width = 800, height = 800)
print(p)
dev.off()
}
}
plots_bi_num(data_num = train_div$numeric, y_variable = "SalePrice")
#bivariate analysis of numerical variables
# as arguments it takes data set containing numerical features and the variable that we want to predict
plots_bi_num <- function(data_num, y_variable) {
source("helper_functions/explore_outliers_num.R")
outliers_num_result<-outliers_num(data_num)
source("helper_functions/explore_cor_with.R")
cor_result<-cor_with(data_num, y_variable)
short <- function(a) {
return(paste(a/1000, "k", sep = ""))
}
for (i in cor_result$Variable) {
p<-ggplot()+
geom_point(data=data_num, aes_string(y=y_variable, x=i))+
geom_vline(xintercept = outliers_num_result[outliers_num_result$Variable==i, "high_outlier"], col="red")+
geom_hline(yintercept = outliers_num_result[outliers_num_result$Variable==y_variable, "high_outlier"], col="red")+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i))+
geom_smooth(data=data_num, aes_string(y=y_variable, x=i), method = "lm")+
scale_y_continuous(labels = short)
cor<-round(cor_result[cor_result$Variable==i,"Cor"],2)
name<-paste(cor, "_", i,"_bi_num.png", sep = "")
full_path<-paste("plots/",name, sep="")
png(full_path, width = 800, height = 800)
print(p)
dev.off()
}
}
plots_bi_num(data_num = train_div$numeric, y_variable = "SalePrice")
source("helper_functions/explote_plots_uni_cat.R")
plot_uni_cat(data_with_cat_var = train_div$other, data_to_plot_with = combi)
source("helper_functions/explote_plots_uni_num.R")
plot_uni_num(data_with_num_var = train_div$num, data_to_plot_with = combi)
p<-ggplot()+
geom_boxplot(data=train, aes_string(x="Street", y="SalePrice"))+
geom_violin(data=train, aes_string(x="Street", y="SalePrice"), alpha=0)
p
temp<-train[,c("SalePrice","BsmtUnfSF")]
temp
temp_scale<-scale(temp)
source("C://Users/T540pDLEWYNBQ/Desktop/house_price/helper_functions/sample_ec.R")
cluster<-kmeans(temp_scale, 3)
cluster
cluster$cluster
temp<-rbind(temp, cluster$cluster)
library(gpglot2)
library(gglot2)
library(ggplot2)
temp
temp<-train[,c("SalePrice","BsmtUnfSF")]
temp_scale<-scale(temp)
cluster<-kmeans(temp_scale, 3)
temp<-cbind(temp, cluster$cluster)
ggplot(data = temp)+
geom_point(aes(x = BsmtUnfSF, y = SalePrice))
ggplot(data = temp)+
geom_point(aes(x = BsmtUnfSF, y = SalePrice, col=`cluster$cluster`))
cluster$centers
ggplot(data = temp)+
geom_point(aes(x = BsmtUnfSF, y = SalePrice, col=`cluster$cluster`))
plot(cluster)
cluster
plot(cluster$centers)
plot(cluster$cluster)
plot(cluster$size)
ggplot(data = temp)+
geom_point(aes(x = BsmtUnfSF, y = SalePrice, col=`cluster$cluster`))
temp_scale
head(temp_scale)
ggplot(data = temp_scale)+
geom_point(aes(x = BsmtUnfSF, y = SalePrice, col=`cluster$cluster`))
temp_scale<-cbind(temp_scale, cluster$cluster)
ggplot(data = temp_scale)+
geom_point(aes(x = BsmtUnfSF, y = SalePrice, col=`cluster$cluster`))
temp_scale<-data.frame(temp_scale)
temp_scale<-cbind(temp_scale, cluster$cluster)
temp_scale<-scale(temp)
temp_scale<-data.frame(temp_scale)
temp_scale<-cbind(temp_scale, cluster$cluster)
ggplot(data = temp_scale)+
geom_point(aes(x = BsmtUnfSF, y = SalePrice, col=`cluster$cluster`))
ggplot(data = temp_scale)+
geom_point(aes(x = BsmtUnfSF, y = SalePrice, col=`cluster$cluster`))+
geom_point(data = cluster$centers, aes(x = BsmtUnfSF, y = SalePrice))
ggplot(data = temp_scale)+
geom_point(aes(x = BsmtUnfSF, y = SalePrice, col=`cluster$cluster`))+
geom_point(data = data.frame(cluster$centers), aes(x = BsmtUnfSF, y = SalePrice))
plot(cluster$withinss)
cluster$totss
cluster$centers
p<-ggplot()+
geom_boxplot(data=train, aes_string(x="Street", y="SalePrice"))+
geom_violin(data=train, aes_string(x="Street", y="SalePrice"), alpha=0)
p
names(train_div$other)
p<-ggplot()+
geom_boxplot(data=train, aes_string(x="MSZoning", y="SalePrice"))+
geom_violin(data=train, aes_string(x="MSZoning", y="SalePrice"), alpha=0)
p
p<-ggplot()+
geom_boxplot(data=train, aes_string(x="MSZoning", y="SalePrice"))
p
p<-ggplot()+
geom_boxplot(data=train, aes_string(x="MSZoning", y="SalePrice"))+
geom_violin(data=train, aes_string(x="MSZoning", y="SalePrice"), alpha=0)
p
table(train$MSZoning)
temp<-train[train$MSZoning=="RM"]
temp<-train[train$MSZoning=="RM",]
hist(x = temp$SalePrice)
FV<-train[train$MSZoning=="FV",]
hist(x = FV$SalePrice)
hist(x = RM$SalePrice)
RM<-train[train$MSZoning=="RM",]
hist(x = RM$SalePrice)
FV<-train[train$MSZoning=="FV",]
hist(x = FV$SalePrice)
RM<-train[train$MSZoning=="RM",]
hist(x = RM$SalePrice)
RM<-train[train$MSZoning=="RM" & train$SalePrice<400000,]
hist(x = RM$SalePrice)
RM<-train[train$MSZoning=="RM" & train$SalePrice<300000,]
hist(x = RM$SalePrice)
hist(x = RM$SalePrice, breaks = seq(0,500000,10000))
RM<-train[train$MSZoning=="RM",]
hist(x = RM$SalePrice, breaks = seq(0,500000,10000))
FV<-train[train$MSZoning=="FV",]
hist(x = FV$SalePrice)
hist(x = FV$SalePrice, breaks = seq(0,500000,10000))
RL<-train[train$MSZoning=="RL",]
hist(x = RL$SalePrice, breaks = seq(0,500000,10000))
RL$SalePrice
RM<-train[train$MSZoning=="RM",]
hist(x = RM$SalePrice, breaks = seq(0,500000,10000))
p<-ggplot()+
geom_boxplot(data=train, aes_string(x="MSZoning", y="SalePrice"))+
geom_violin(data=train, aes_string(x="MSZoning", y="SalePrice"), alpha=0)
p
RM<-train[train$MSZoning=="RM",]
hist(x = RM$SalePrice, breaks = seq(0,500000,10000))
FV<-train[train$MSZoning=="FV",]
hist(x = FV$SalePrice, breaks = seq(0,500000,10000))
RL<-train[train$MSZoning=="RL",]
hist(x = RL$SalePrice, breaks = seq(0,500000,10000))
hist(x = RL$SalePrice, breaks = seq(0,600000,10000))
RL<-train[train$MSZoning=="RL",]
hist(x = RL$SalePrice, breaks = seq(0,600000,10000))
